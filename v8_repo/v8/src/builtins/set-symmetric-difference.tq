// Copyright 2023 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace collections {

// https://tc39.es/proposal-set-methods/#sec-set.prototype.symmetricdifference
transitioning javascript builtin SetPrototypeSymmetricDifference(
    js-implicit context: NativeContext, receiver: JSAny)(other: JSAny): JSSet {
  const methodName: constexpr string = 'Set.prototype.symmetricDifference';
  const fastIteratorResultMap = GetIteratorResultMap();

  // 1. Let O be the this value.
  // 2. Perform ? RequireInternalSlot(O, [[SetData]]).
  const o = Cast<JSSet>(receiver) otherwise
  ThrowTypeError(
      MessageTemplate::kIncompatibleMethodReceiver, methodName, receiver);

  const table = Cast<OrderedHashSet>(o.table) otherwise unreachable;

  // 3. Let otherRec be ? GetSetRecord(other).
  let otherRec = GetSetRecord(other, methodName);

  // 4. Let keysIter be ? GetKeysIterator(otherRec).
  let keysIter =
      GetKeysIterator(otherRec.object, UnsafeCast<Callable>(otherRec.keys));

  // 5. Let resultSetData be a copy of O.[[SetData]].
  let resultSetData = Cast<OrderedHashSet>(CloneFixedArray(
      table, ExtractFixedArrayFlag::kFixedArrays)) otherwise unreachable;

  let numberOfElements: Smi = 0;

  // 6. Let next be true.
  let nextRecord: JSReceiver;
  // 7. Repeat, while next is not false,
  try {
    while (true) {
      //  a. Set next to ? IteratorStep(keysIter).
      nextRecord = iterator::IteratorStep(keysIter, fastIteratorResultMap)
          otherwise Done;

      //  b. If next is not false, then
      //      i. Let nextValue be ? IteratorValue(next).
      let nextValue =
          iterator::IteratorValue(nextRecord, fastIteratorResultMap);

      //      ii. If nextValue is -0ùîΩ, set nextValue to +0ùîΩ.
      nextValue = collections::NormalizeNumberKey(nextValue);

      //      iii. Let inResult be SetDataHas(resultSetData, nextValue).
      const inResult = TableHasKey(resultSetData, nextValue);

      //      iv. If SetDataHas(O.[[SetData]], nextValue) is true, then
      if (TableHasKey(table, nextValue)) {
        //  1. If inResult is true, remove nextValue from resultSetData.
        if (inResult) {
          numberOfElements = DeleteFromSetTable(resultSetData, nextValue)
              otherwise unreachable;
        }
      } else {
        // v. Else,
        //    1. If inResult is false, append nextValue to resultSetData.
        if (!inResult) {
          resultSetData = AddToSetTable(resultSetData, nextValue, methodName);
          numberOfElements++;
        }
      }
    }
  } label Done {
    resultSetData =
        ShrinkOrderedHashSetIfNeeded(numberOfElements, resultSetData);
    return new JSSet{
      map: *NativeContextSlot(ContextSlot::JS_SET_MAP_INDEX),
      properties_or_hash: kEmptyFixedArray,
      elements: kEmptyFixedArray,
      table: resultSetData
    };
  }
  unreachable;
}
}
